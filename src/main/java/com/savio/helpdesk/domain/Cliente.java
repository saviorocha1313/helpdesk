package com.savio.helpdesk.domain;
//  Camada Model ‚Äî representa os dados da aplica√ß√£o e ser√° mapeada pelo JPA

import java.util.ArrayList;
import java.util.List;
//  Utilit√°rios para manipular lista de chamados associados

import javax.persistence.Entity;
import javax.persistence.OneToMany;
//  Anota√ß√µes JPA para definir a entidade e o relacionamento com outros objetos

import com.fasterxml.jackson.annotation.JsonIgnore;
//  Evita que a lista de chamados seja serializada no JSON para evitar loop infinito

import com.savio.helpdesk.domain.enums.Perfil;
//  Enum que representa os tipos de perfil (CLIENTE, ADMIN, TECNICO)

@Entity //  Marca a classe como uma entidade JPA ‚Äî ser√° uma tabela no banco de dados
public class Cliente extends Pessoa {
    //  Usa heran√ßa ‚Äî Cliente √© um tipo de Pessoa (reaproveita atributos e m√©todos comuns)
    private static final long serialVersionUID = 1L;

    @JsonIgnore
    @OneToMany(mappedBy = "cliente")
    private List<Chamado> chamados = new ArrayList<>();
    //  Um cliente pode ter v√°rios chamados
    //  `mappedBy = "cliente"` aponta para o atributo cliente da classe Chamado
    //  `@JsonIgnore` impede serializa√ß√£o dessa lista, evitando problemas com recursividade

    //  Construtor vazio exigido pelo JPA
    public Cliente() {
        super(); // üß¨ Chama o construtor da classe m√£e (Pessoa)
        addPerfis(Perfil.CLIENTE); // üîê Garante que todo cliente tenha esse perfil por padr√£o
    }

    //  Construtor completo com os campos herdados + perfil padr√£o
    public Cliente(Integer id, String nome, String cpf, String email, String senha) {
        super(id, nome, cpf, email, senha);
        addPerfis(Perfil.CLIENTE); // üîê Define automaticamente o perfil ao instanciar
    }

    //  Getters e setters para acessar os chamados do cliente
    public List<Chamado> getChamados() {
        return chamados;
    }

    public void setChamados(List<Chamado> chamados) {
        this.chamados = chamados;
    }
}
